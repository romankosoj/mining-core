{
  "logging": {
    "level": "info",
    "enableConsoleLog": true,
    "enableConsoleColors": true,
    "logFile": "",
    "logBaseDirectory": "",
    "perPoolLogFile": false
  },

  "banning": {
    "manager": "integrated" // "integrated" or "iptables" (linux only)
  },

  // Where to persist shares and blocks to
  "persistence": {
    // Persist to postgresql database
    "postgres": {
      "host": "127.0.0.1",
      "port": 5432,
      "user": "miningcore",
      "password": "Qx6SJcOOlfVyoR66nZH1",
      "database": "miningcore"
    }
  },

  // Do not allow 0.2% donation to MiningCore developers. Please leave this disabled to help support development of MiningCore.
  "disableDevDonation": false,

  // Generate payouts for recorded shares and blocks
  "paymentProcessing": {
    "enabled": true,
    "interval": 600, // how often to process payouts

    // Path to a file used to backup shares under emergency conditions such as database outage
    "shareRecoveryFile": "recovered-shares.txt"
  },

  "pools": [
    {
      // DON'T change the id after a production pool has begun collecting shares!
      "id": "xmr1",
      "enabled": true,
      "coin": {
        "type": "XMR"
      },

      // Address to where block rewards are given (pool wallet)
      "address": "9wviCeWe2D8XS82k2ovp5EUYLzBt9pYNW2LXUFsZiv8S3Mt21FZ5qQaAroko1enzw3eGr9qC7X1D7Geoo2RrAotYPwq9Gm8",

      // Block rewards go to the configured pool wallet address to later be paid out to miners,
      // except for a percentage that can go to, for examples, pool operator(s) as pool fees or
      // or to donations address. Addresses or hashed public keys can be used. Here is an example
      // of rewards going to the main pool op
      "rewardRecipients": [
        {
          "type": "op",
          "address":
            "9wviCeWe2D8XS82k2ovp5EUYLzBt9pYNW2LXUFsZiv8S3Mt21FZ5qQaAroko1enzw3eGr9qC7X1D7Geoo2RrAotYPwq9Gm8", // pool
          "percentage": 0
        }
      ],

      // How often to poll RPC daemons for new blocks, in milliseconds
      "blockRefreshInterval": 1000,

      // Some miner apps will consider the pool dead/offline if it doesn't receive anything new jobs
      // for around a minute, so every time we broadcast jobs, set a timeout to rebroadcast
      // in this many seconds unless we find a new job. Set to zero or remove to disable this.
      "jobRebroadcastTimeout": 55,

      // Some attackers will create thousands of workers that use up all available socket connections,
      // usually the workers are zombies and don't submit shares after connecting. This features
      // detects those and disconnects them.
      "clientConnectionTimeout": 600, // Remove workers that haven't been in contact for this many seconds

      // If a worker is submitting a high threshold of invalid shares we can temporarily ban their IP
      // to reduce system/network load. Also useful to fight against flooding attacks. If running
      // behind something like HAProxy be sure to enable 'tcpProxyProtocol', otherwise you'll end up
      // banning your own IP address (and therefore all workers).
      "banning": {
        "enabled": true,
        "time": 600, // How many seconds to ban worker for
        "invalidPercent": 50, // What percent of invalid shares triggers ban
        "checkThreshold": 50 // Check invalid percent when this many shares have been submitted
      },

      // Each pool can have as many ports for your miners to connect to as you wish. Each port can
      // be configured to use its own pool difficulty and variable difficulty settings. varDiff is
      // optional and will only be used for the ports you configure it for.
      "ports": {
        "4032": {
          "difficulty": 1600,

          "varDiff": {
            "minDiff": 1, // Minimum difficulty
            "maxDiff": 512, // Network difficulty will be used if it is lower than this
            "targetTime": 15, // Try to get 1 share per this many seconds
            "retargetTime": 90, // Check to see if we should retarget every this many seconds
            "variancePercent": 30 // Allow time to very this % from target without retargeting
          }
        },

        "4256": {
          "difficulty": 1000
        }
      },

      // Recommended to have at least two daemon instances running in case one drops out-of-sync
      // or offline. For redundancy, all instances will be polled for block/transaction updates
      // and be used for submitting blocks. Creating a backup daemon involves spawning a daemon
      // using the "-datadir=/backup" argument which creates a new daemon instance with it's own
      // RPC config. For more info on this see: https:// en.bitcoin.it/wiki/Data_directory
      // and https:// en.bitcoin.it/wiki/Running_bitcoind
      "daemons": [
        {
          "host": "127.0.0.1",
          "port": 28081, // 28081 = testnet
          "user": "monerorpc",
          "password": "rpcpassword"
        },
        {
          "host": "127.0.0.1",
          "port": 28082, // 28082 = testnet
          "user": "monerorpc",
          "password": "rpcpassword",
          "category": "wallet"
        }
      ],

      // Generate payouts for recorded shares
      "paymentProcessing": {
        "enabled": true,
        "minimumPayment": 0.01, // in pool-base-currency (ie. Bitcoin, NOT Satoshis)
        "payoutScheme": "PPLNS",
        "payoutSchemeConfig": {
          "factor": 2.0
        }
      }
    },

    //           {
    //      // DON'T change the id after a production pool has begun collecting shares!
    //      "id": "btc1",
    //      "enabled": true,
    //      "coin": {
    //          "type": "BTC"
    //      },

    //      // Address to where block rewards are given (pool wallet)
    //      "address": "mpAkx1tqu4Tth2Zpi5uMdejWtM9q8EqC26",

    //      // Block rewards go to the configured pool wallet address to later be paid out to miners,
    //      // except for a percentage that can go to, for examples, pool operator(s) as pool fees or
    //      // or to donations address. Addresses or hashed public keys can be used. Here is an example
    //      // of rewards going to the main pool op
    //      "rewardRecipients": [
    //          {
    //              "type": "op",
    //              "address": "n2UQfEyUtYoKqtgJzdDBwo8qHpjbkH9weP",    // pool
    //              "percentage": 1.5
    //          }
    //      ],

    //      // How often to poll RPC daemons for new blocks, in milliseconds
    //      "blockRefreshInterval": 1000,

    //      // Some miner apps will consider the pool dead/offline if it doesn't receive anything new jobs
    //      // for around a minute, so every time we broadcast jobs, set a timeout to rebroadcast
    //      // in this many seconds unless we find a new job. Set to zero or remove to disable this.
    //      "jobRebroadcastTimeout": 55,

    //      // Some attackers will create thousands of workers that use up all available socket connections,
    //      // usually the workers are zombies and don't submit shares after connecting. This features
    //      // detects those and disconnects them.
    //      "clientConnectionTimeout": 600, // Remove workers that haven't been in contact for this many seconds

    //      // If a worker is submitting a high threshold of invalid shares we can temporarily ban their IP
    //      // to reduce system/network load. Also useful to fight against flooding attacks. If running
    //      // behind something like HAProxy be sure to enable 'tcpProxyProtocol', otherwise you'll end up
    //      // banning your own IP address (and therefore all workers).
    //      "banning": {
    //          "enabled": true,
    //          "time": 600, // How many seconds to ban worker for
    //          "invalidPercent": 50, // What percent of invalid shares triggers ban
    //          "checkThreshold": 50 // Check invalid percent when this many shares have been submitted
    //      },

    //      // Each pool can have as many ports for your miners to connect to as you wish. Each port can
    //      // be configured to use its own pool difficulty and variable difficulty settings. varDiff is
    //      // optional and will only be used for the ports you configure it for.
    //      "ports": {
    //          "3032": { // A port for your miners to connect to
    //              "difficulty": 0.01, // the pool difficulty for this port

    //              // Variable difficulty is a feature that will automatically adjust difficulty for
    //              // individual miners based on their hashrate in order to lower networking overhead
    //              "varDiff": {
    //                  "minDiff": 1, // Minimum difficulty
    //                  "maxDiff": 512, // Network difficulty will be used if it is lower than this
    //                  "targetTime": 15, // Try to get 1 share per this many seconds
    //                  "retargetTime": 90, // Check to see if we should retarget every this many seconds
    //                  "variancePercent": 30 // Allow time to very this % from target without retargeting
    //              }
    //          },

    //          "3256": { //  Another port for your miners to connect to, this port does not use varDiff
    //              "difficulty": 0.01 // 256 //  The pool difficulty
    //          }
    //      },

    //      // Recommended to have at least two daemon instances running in case one drops out-of-sync
    //      // or offline. For redundancy, all instances will be polled for block/transaction updates
    //      // and be used for submitting blocks. Creating a backup daemon involves spawning a daemon
    //      // using the "-datadir=/backup" argument which creates a new daemon instance with it's own
    //      // RPC config. For more info on this see: https:// en.bitcoin.it/wiki/Data_directory
    //      // and https:// en.bitcoin.it/wiki/Running_bitcoind
    //      "daemons": [
    //          {
    //              "host": "127.0.0.1",
    //              "port": 19001, // 18332 = testnet, 19001 = regtest (bob)
    //              "user": "user",
    //              "password": "pass"
    //          }
    //      ],

    //      // Generate payouts for recorded shares
    //      "paymentProcessing": {
    //          "enabled": true,
    //          "minimumPayment": 0.01, // in pool-base-currency (ie. Bitcoin, NOT Satoshis)
    //          "payoutScheme": "PPLNS",
    //          "payoutSchemeConfig": {
    //              "factor": 2.0
    //          }
    //      }
    //  },

    //{
    //    // DON'T change the id after a production pool has begun collecting shares!
    //    "id": "ltc1",
    //    "enabled": true,
    //    "coin": {
    //        "type": "LTC"
    //    },

    //    // Address to where block rewards are given (pool wallet)
    //    "address": "mytFDfarqgFK88qwg8amrfgNNjy9wcxyU9",

    //    // Block rewards go to the configured pool wallet address to later be paid out to miners,
    //    // except for a percentage that can go to, for examples, pool operator(s) as pool fees or
    //    // or to donations address. Addresses or hashed public keys can be used. Here is an example
    //    // of rewards going to the main pool op
    //    "rewardRecipients": [
    //        // {
    //        //     "type": "op",
    //        //     "address": "n2jViffyoYeEfCKAJJKzRtwRkeLKepXRZ5",    // pool
    //        //     "percentage": 1.5
    //        // }
    //    ],

    //    // How often to poll RPC daemons for new blocks, in milliseconds
    //    "blockRefreshInterval": 1000,

    //    // Some miner apps will consider the pool dead/offline if it doesn't receive anything new jobs
    //    // for around a minute, so every time we broadcast jobs, set a timeout to rebroadcast
    //    // in this many seconds unless we find a new job. Set to zero or remove to disable this.
    //    "jobRebroadcastTimeout": 55,

    //    // Some attackers will create thousands of workers that use up all available socket connections,
    //    // usually the workers are zombies and don't submit shares after connecting. This features
    //    // detects those and disconnects them.
    //    "clientConnectionTimeout": 600, // Remove workers that haven't been in contact for this many seconds

    //    // If a worker is submitting a high threshold of invalid shares we can temporarily ban their IP
    //    // to reduce system/network load. Also useful to fight against flooding attacks. If running
    //    // behind something like HAProxy be sure to enable 'tcpProxyProtocol', otherwise you'll end up
    //    // banning your own IP address (and therefore all workers).
    //    "banning": {
    //        "enabled": true,
    //        "time": 600, // How many seconds to ban worker for
    //        "invalidPercent": 50, // What percent of invalid shares triggers ban
    //        "checkThreshold": 50 // Check invalid percent when this many shares have been submitted
    //    },

    //    // Each pool can have as many ports for your miners to connect to as you wish. Each port can
    //    // be configured to use its own pool difficulty and variable difficulty settings. varDiff is
    //    // optional and will only be used for the ports you configure it for.
    //    "ports": {
    //        "3032": { // A port for your miners to connect to
    //            "difficulty": 1, // the pool difficulty for this port

    //            // Variable difficulty is a feature that will automatically adjust difficulty for
    //            // individual miners based on their hashrate in order to lower networking overhead
    //            "varDiff": {
    //                "minDiff": 1, // Minimum difficulty
    //                "maxDiff": 512, // Network difficulty will be used if it is lower than this
    //                "targetTime": 15, // Try to get 1 share per this many seconds
    //                "retargetTime": 90, // Check to see if we should retarget every this many seconds
    //                "variancePercent": 30 // Allow time to very this % from target without retargeting
    //            }
    //        },

    //        "3256": { //  Another port for your miners to connect to, this port does not use varDiff
    //            "difficulty": 10 // 256 //  The pool difficulty
    //        }
    //    },

    //    // Recommended to have at least two daemon instances running in case one drops out-of-sync
    //    // or offline. For redundancy, all instances will be polled for block/transaction updates
    //    // and be used for submitting blocks. Creating a backup daemon involves spawning a daemon
    //    // using the "-datadir=/backup" argument which creates a new daemon instance with it's own
    //    // RPC config. For more info on this see: https:// en.bitcoin.it/wiki/Data_directory
    //    // and https:// en.bitcoin.it/wiki/Running_bitcoind
    //    "daemons": [
    //        {
    //            "host": "127.0.0.1",
    //            "port": 19001, // 18332 = testnet, 19001 = regtest (bob)
    //            "user": "user",
    //            "password": "pass"
    //        }
    //    ],

    //    // Generate payouts for recorded shares
    //    "paymentProcessing": {
    //        "enabled": true,
    //        "minimumPayment": 0.01, // in pool-base-currency (ie. Bitcoin, NOT Satoshis)
    //        "payoutScheme": "PPLNS",
    //        "payoutSchemeConfig": {
    //            "factor": 2.0
    //        }
    //    }
    //}
  ]
}